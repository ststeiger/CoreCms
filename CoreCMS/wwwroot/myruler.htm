<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>Legende</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <!--
    <link rel="stylesheet" type="text/css" href="ruler.min.css">

    <script src="ruler.js"></script>
    -->

    <style type="text/css">
        html, body
        {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        div
        {
            margin: 0px;
            padding: 0px;
            box-sizing: border-box;
        }


            div.horizontal.cm
            {
                display: inline-block;
                width: 1cm;
                height: 0.5cm;
                border-right: 1px solid black;
            }

            div.horizontal.mm
            {
                display: inline-block;
                width: 1mm;
                height: 3mm;
                margin: 0px;
                padding: 0px;
                border-right: 0.1mm solid black;
            }

            div.horizontal.halfcm
            {
                display: inline-block;
                width: 5mm;
                height: 4mm;
            }

                div.horizontal.halfcm.first
                {
                    border-right: 0.3mm solid red;
                }

            div.horizontal.cmlabel
            {
                display: inline-block;
                width: 1cm;
                height: 0.4cm;
                font-family: Verdana;
                font-size: 2.5mm;
                text-align: center;
            }


            div.vertical.cm
            {
                display: block;
                width: 0.5cm;
                height: 1cm;
                border-bottom: 1px solid black;
                clear: both;
            }

            div.vertical.mm
            {
                display: block;
                width: 0.3cm;
                height: 1mm;
                margin: 0px;
                padding: 0px;
                border-bottom: 0.1mm solid black;
            }

            div.vertical.halfcm
            {
                display: block;
                width: 4mm;
                height: 0.5cm;
            }

                div.vertical.halfcm.first
                {
                    border-bottom: 0.3mm solid red;
                }


            div.vertical.cmlabel
            {
                display: block;
                width: 1cm;
                height: 1cm;
                #border-right: 1px solid black;
                font-size: 2.5mm;
                font-family: Verdana;
                writing-mode: vertical-lr;
                #writing-mode: vertical-rl;
                -ms-writing-mode: tb-rl;
                transform-origin: center;
                transform: rotate(180deg);
            }

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none)
        {
            div.vertical.cmlabel
            {
                #IE 10/11 ONLY;
                margin-left: 0.65cm;
            }
        }
    </style>


</head>
<body style="background-color: lightgrey;">

    <div style="display: block; position:relative;">

        <div id="measure" style="background-color: hotpink; width: 1cm; height: 1cm; position:absolute; left: 0cm; top: 0cm;"></div>

        <div id="horizontalRuler" style="position:absolute; left: 1cm; top: 0cm; white-space: nowrap;">
            <div style="display: inline-block; position:absolute; left: 0.0cm; top: 0.5cm; width: 0.5cm; height: 0.5cm; background-color: whitesmoke; "></div>
            <div class="ruler" style="background-color: whitesmoke; padding-right: 0.5cm"></div>
            <div class="scale" style="display: inline-block; position:absolute; left: 0.5cm; top: 0.5cm; background-color: whitesmoke;"></div>
        </div>

        <div id="verticalRuler" style="position:absolute; left: 0cm; top: 1cm; width: 1cm; white-space: normal;">
            <div class="ruler" style="background-color: whitesmoke; padding-bottom: 0.5cm;"></div>
            <div class="scale" style="display: block; width: 1cm; position: absolute; top: 0.25cm; left: 0cm; z-index: 9999;"></div>
        </div><!--

     --><div id="page" style="display: block; position:relative; left: 1cm; top: 1cm; width: 29.7cm; height: 21cm; background-color: white; box-shadow: inset 1px 1px 0 rgba(0,0,0,.1), inset 0 -1px 0 rgba(0,0,0,.07);">

            <div id="title" title="Titel" style="position:absolute; left: 1cm; top: 1cm; font-family: 'Bodoni MT'; font-size: 1cm;">Überschrift</div>

            <div id="drawing" title="Zeichung" style="position:absolute; background-color: aliceblue; left: 1cm; top: 3cm; ">
                <img src="plan_forum.svg" style="width: 13cm; height: 10cm; border: 1px solid black; " />
            </div>

            <div id="logo" title="Logo" style="position:absolute; background-color: aliceblue; left: 23cm; top: 1cm; ">
                <img src="logo.svg" style="width: 5cm; height: 2.5cm; border: 1px solid black; " />
            </div>

            <div id="north_arrow" title="Nordpfeil" style="position:absolute; background-color: aliceblue; left: 1cm; top: 17cm; ">
                <img src="windrose.svg" style="width: 5cm; height: 2.5cm; border: 1px solid black; " />
            </div>
        </div>

    </div>

    <script>
        // https://codepen.io/j4n/pen/wBVVVN

        function verticalRuler()
        {
            var verticalRuler = document.getElementById("verticalRuler");
            var myruler = verticalRuler.getElementsByClassName("ruler")[0];

            var numCm = 25;

            for (var i = 0; i < numCm; ++i)
            {
                var div = document.createElement("div");
                div.classList.add("vertical");
                div.classList.add("cm");



                var divHalf = document.createElement("div");
                divHalf.classList.add("vertical");
                divHalf.classList.add("halfcm");
                divHalf.classList.add("first");


                for (var j = 0; j < 4; ++j)
                {
                    var divmm = document.createElement("div");
                    divmm.classList.add("vertical");
                    divmm.classList.add("mm");

                    var divClear = document.createElement("div");
                    divClear.style = "clear: both; width: 0px; height: 0px;";

                    divHalf.appendChild(divmm);
                    divHalf.appendChild(divClear);
                }


                div.appendChild(divHalf);




                var divHalf = document.createElement("div");
                divHalf.classList.add("vertical");
                divHalf.classList.add("halfcm");


                for (var j = 0; j < 4; ++j)
                {
                    var divmm = document.createElement("div");
                    divmm.classList.add("vertical");
                    divmm.classList.add("mm");

                    var divClear = document.createElement("div");
                    divClear.style = "clear: both; width: 0px; height: 0px;";

                    divHalf.appendChild(divmm);
                    divHalf.appendChild(divClear);
                }

                div.appendChild(divHalf);



                myruler.appendChild(div);

                var div = document.createElement("div");
                div.style = "clear: both; width: 0px; height: 0px;";

                myruler.appendChild(div);
            }



            var scale = verticalRuler.getElementsByClassName("scale")[0];
            for (var i = 0; i < numCm; ++i)
            {
                var div = document.createElement("div");
                div.classList.add("vertical");
                div.classList.add("cmlabel");

                div.appendChild(document.createTextNode((i + 1).toString() + "cm"));
                scale.appendChild(div);
            }

        }


        function horizonalRuler()
        {
            var horizontalRuler = document.getElementById("horizontalRuler");
            var myruler = horizontalRuler.getElementsByClassName("ruler")[0];

            var numCm = 40;

            for (var i = 0; i < numCm; ++i)
            {
                var div = document.createElement("div");
                div.classList.add("horizontal");
                div.classList.add("cm");


                var divHalf = document.createElement("div");
                divHalf.classList.add("horizontal");
                divHalf.classList.add("halfcm");
                divHalf.classList.add("first");

                for (var j = 0; j < 4; ++j)
                {
                    var divmm = document.createElement("div");
                    divmm.classList.add("horizontal");
                    divmm.classList.add("mm");
                    divHalf.appendChild(divmm);
                }

                div.appendChild(divHalf);


                var divHalf = document.createElement("div");
                divHalf.classList.add("horizontal");
                divHalf.classList.add("halfcm");

                for (var j = 0; j < 4; ++j)
                {
                    var divmm = document.createElement("div");
                    divmm.classList.add("horizontal");
                    divmm.classList.add("mm");
                    divHalf.appendChild(divmm);
                }

                div.appendChild(divHalf);


                myruler.appendChild(div);
            }


            var numRuler = horizontalRuler.getElementsByClassName("scale")[0];

            for (var i = 0; i < numCm; ++i)
            {
                var div = document.createElement("div");
                div.classList.add("horizontal");
                div.classList.add("cmlabel");

                div.appendChild(document.createTextNode((i + 1).toString() + "cm"));
                numRuler.appendChild(div);
            }
        }

        horizonalRuler();
        verticalRuler();
        
        
        // Make the DIV element draggagle:
        dragElement(document.getElementById("drawing"));
        dragElement(document.getElementById("title"));
        dragElement(document.getElementById("logo"));
        dragElement(document.getElementById("north_arrow"));
        
        
        function dragElement(elmnt)
        {
            

            // console.log(elmnt)

            // hres: HorizontalResolution
            // vres: VerticalResolution
            var   page = document.getElementById("page") 
                , unit = document.getElementById("measure")
                , tO = { w: elmnt.offsetWidth, h: elmnt.offsetHeight, hres: unit.offsetWidth, vres: unit.offsetHeight }, isActive = false
                , pageInfo = { width: page.getBoundingClientRect().width, height: page.getBoundingClientRect().height }
            ;


            // https://stackoverflow.com/questions/24025165/simulating-a-mousedown-click-mouseup-sequence-in-tampermonkey
            function triggerMouseEvent(node, eventType)
            {
                var clickEvent = document.createEvent('MouseEvents');
                clickEvent.initEvent(eventType, true, true);
                node.dispatchEvent(clickEvent);
            }



            function getMaxZindex() 
            {
                return Math.max.apply(null,
                    Array.prototype.map.call(document.getElementById("page").querySelectorAll("*"),
                        function (e, n)
                        {
                            var zindex = window.getComputedStyle(e).getPropertyValue("z-index");

                            if ((zindex != 'static') && (zindex != 'auto'))
                                return parseInt(zindex) || 1;

                            return 0;
                        }
                    )
                );
            }

            function fX(event) { return (event.touches && event.touches.length) ? event.touches[0].clientX : event.clientX; }
            function fY(event) { return (event.touches && event.touches.length) ? event.touches[0].clientY : event.clientY; }

            var sync = function (ele, o, x, y)
            {
                try
                {
                    // this._Trace('sync[Start]');
                    // console.log("setting style", x, y);

                    if (x < 0)
                        x = 0;
                    if (y < 0)
                        y = 0;

                    if ((x + o.w) > pageInfo.width)
                        x = pageInfo.width - o.w;

                    if ((y + o.h) > pageInfo.height)
                        y = pageInfo.height - o.h;
                    
                    // ele.offsetWidth
                    // ele.offsetHeight
                    // ele.offsetTop
                    // ele.offsetLeft
                    
                    var xCM = x / o.hres;
                    var yCM = y / o.vres;

                    ele.style.left = xCM + 'cm';
                    ele.style.top = yCM + 'cm';

                    //this._Trace('sync[End]')
                }
                catch (err)
                {
                    console.log("sync error", this, err);
                }
            }.bind(this, elmnt, tO);


            elmnt.onmousedown = elmnt.ontouchstart = function (ele, o, e)
            {
                // console.log("onmousedown");

                var zindex = getMaxZindex() + 1;
                ele.style["z-index"] = zindex;
                
                isActive = true;

                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                o.x = fX(e);
                o.y = fY(e);
                o.w = ele.offsetWidth;
                o.h = ele.offsetHeight;
                o.start = { x: parseFloat(ele.style.left) * o.hres, y: parseFloat(ele.style.top) * o.vres }
                // console.log(o);

                return false;
            }.bind(this, elmnt, tO);

            /*
            elmnt.ondblclick = function (o, e)
            {
                console.log(e);

                var coords = { x: fX(e), y: fY(e) };
                var bounds = elmnt.getBoundingClientRect();

                console.log(coords)
                

                //bounds.x;
                //bounds.y;

                //bounds.width;
                //bounds.height;


                console.log("oL", elmnt.offsetLeft);
                console.log("oL", elmnt.offsetTop);


            }.bind(this, tO);
            */

            /*
             elmnt.onmousemove = elmnt.ontouchmove =
                function (ele, o, e)
            {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                console.log(isActive)

                if (!isActive)
                    return;

                console.log("onmousemove", ele);
                // console.log("onmousemove", o);
                if (o.w)
                {
                    o.end = { x: fX(e), y: fY(e) };
                    var deltaX = o.end.x - o.x, deltaY = o.end.y - o.y;
                    sync(o.start.x + deltaX, o.start.y + deltaY);
                }
                
            }.bind(this, elmnt, tO);
            */

             page.onmousemove = page.ontouchmove = function (ele, o, e)
             {
                 e.preventDefault ? e.preventDefault() : e.returnValue = false;

                 console.log(isActive)

                 if (!isActive)
                     return;

                 console.log("onmousemove", ele);
                 // console.log("onmousemove", o);
                 if (o.w)
                 {
                     o.end = { x: fX(e), y: fY(e) };
                     var deltaX = o.end.x - o.x, deltaY = o.end.y - o.y;
                     sync(o.start.x + deltaX, o.start.y + deltaY);
                 }

             }.bind(this, elmnt, tO);


            
            /*
            elmnt.onmouseleave = elmnt.ontouchcancel = function (ele, o, e)
            {
                ele.style.cursor = "";
                if (!isActive)
                    return;
                
                // triggerMouseEvent(ele, "mouseup");
                
                return;
                console.log("onmouseleave", o);
                isActive = false;
                
                if (o != null)
                {
                    e.preventDefault ? e.preventDefault() : e.returnValue = false;
                    o.w = o.end = o.start = null;
                }
                
            }.bind(this, elmnt, tO);
            */
            
            elmnt.onmouseup = elmnt.ontouchend = function (o, e)
            {
                // console.log("onmouseUP", o);
                isActive = false;
                
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                
                if (o != null)
                {
                    o.w = o.end = o.start = null;    
                }
                
            }.bind(this, tO);


            elmnt.onmouseenter = function (ele, e)
            {
                ele.style.cursor = "move";
            }.bind(this, elmnt);
            
        }
        
    </script>

</body>
</html>
