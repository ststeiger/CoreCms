<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta charset="utf-8" />
    
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>Query Database</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />
    	
    <!--
	<link rel="stylesheet" type="text/css" href="ruler.min.css">
        
	<script src="ruler.js"></script>
	-->
	
    <style type="text/css">
		
        html, body
        {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }
        
        
        .vertical
        {
            display: flex;
            /*min-height: 100vh;*/
            width: 100%;
            height: 100%;
            flex-direction: column;
        }


        .horizontal
        {
            display: flex;
            height: 100%;
            flex-direction: row;
        }
        
        
        .spacer
        {
            background-color: darkseagreen;
        }
        
        .spacer.horizontal
        {
            width: 2mm;
            min-width: 2mm;
            cursor: ew-resize;
        }
        
        .spacer.vertical
        {
            height: 2mm;
            min-height: 2mm;
            cursor: ns-resize;
        }
        
    </style>
    
    <script src="js/monaco-editor/min/vs/loader.js"></script>
</head>
<body>

<div class="horizontal">
    <!--
    <div style="width: 1cm; background-color: black;"></div>
    <div class="spacer horizontal"></div>
    -->
    
    <div class="vertical" style="width: 3cm; min-width: 3cm; background-color: cyan;" >
        <div style="display: block; width: 3cm; height: 1cm; background-color: yellow;">Test 1</div>
        <div style="display: block; width: 1cm; height: 1cm; background-color: black;color: #fff;">Test 2</div>
        Tree
    </div>
    
    <div class="spacer horizontal"></div>
    
    <div class="vertical" style="flex: 1; background-color: hotpink;">

        <div style="height: 1cm; min-height: 1cm; background-color: crimson;">
            Toolstrip
            <style>
                #btnExecute:first-letter
                {
                    text-decoration: underline;
                }
                
            </style>
            <input id="btnExecute" type="button" accesskey="E" value="Execute (F5|F6)" onclick="executeStatement();" />
            <input id="btnCancel" type="button" accesskey="C" value="Cancel" onclick="alert('TODO');" />
        </div>
        <div class="spacer vertical"></div>
        <div style="height: 50%; background-color: orange;">
            <div id="textEditor" style="width: 100%; height: 100%;"></div>
        </div>
        <div class="spacer vertical"></div>

        <div class="horizontal" style="flex: 1; background-color: gray;">
            <div style="display: flex; width: 100%; background-color: #0366d6;">
                <!-- Put DATA here -->
                <iframe name="ifrmData" src="about:blank" frameborder="0" allowtransparency="true" style="width: 100%; height: 100%; background-color: white; ">
                    iFrame not supported
                </iframe>
            </div>


            <div class="spacer horizontal"></div>
            <div style="width: 1cm; min-width: 1cm; background-color: #f00;
  display: flex;    
  text-align: center;
  flex-direction: column;
  justify-content: center; 
  align-items: center;
">
                <span style="writing-mode: vertical-lr;  -ms-writing-mode: tb-lr;
transform-origin: center; transform: rotate(180deg);
">Here come exports</span>
                
            </div>
        </div>


        <div class="spacer vertical"></div>
        <div style="display: block; height: 1cm; background-color: yellow;">Status</div>

    </div>
</div>


<script>

    // Addds content changed listener to `editor` and invokes `callback` with all change events.
    function onDidChangeModelContentBulk(editor, callback) 
    {
        return editor.getModel().addBulkListener(function(events) 
        {
            contentChangeEvents = events.filter(function(e) 
            {
                // console.log(e); // contentChanged, rawContentChanged2
                return e.type === 'rawContentChanged2';
            }).map(function(e) 
            {
                // console.log(e.data);
                return e.data; //return e.getData();
            });
            
            if (contentChangeEvents.length > 0) 
            {
                callback(editor, contentChangeEvents);
            }
        });
    }
    
    // console.log(require);
    require.config({ paths: { 'vs': 'js/monaco-editor/min/vs' } });
    require(['vs/editor/editor.main'], function ()
    {
        window.editor = monaco.editor.create(document.getElementById('textEditor'), {
            value: [
                  ""
                , "SELECT "
                , "     BE_ID "
                , "    --,BE_User "
                , "    ,BE_Language "
                , "    ,BE_Hash "
                , "    ,BE_Passwort "
                , "    ,BE_IsCOR_Hash "
                , "    ,BE_Status "
                , "FROM T_Benutzer "
                , "WHERE BE_User = 'administrator' "
                ,""
            ].join('\n'),
            // https://github.com/Microsoft/monaco-languages
            // https://github.com/Microsoft/monaco-editor
            // https://microsoft.github.io/monaco-editor/playground.html
            //language: 'javascript'
            language: 'sql'
            //language: 'markdown'
        });


        // https://github.com/Microsoft/monaco-editor/issues/341
        onDidChangeModelContentBulk(window.editor, function (editor, e)
        {
            // console.log("change", arguments);
            console.log(editor.getValue());
        });


        // console.log("cursor position: ", window.editor.getPosition());
        //console.log("set position: ", window.editor.setPosition({lineNumber: 2, column: 14}));
        // https://github.com/Microsoft/monaco-editor/issues/194
        // if (window.editor.isFocused())
        window.editor.focus();
    });





    function postForm(data, target)
    {
        var tF = document.createElement('form');
        tF.setAttribute('id', 'frm_' + Date.now());
        tF.setAttribute('method', 'post');
        tF.setAttribute('action', 'getData');
        tF.setAttribute('style', 'display: none;');
        tF.setAttribute('target', target);

        for (var k in data)
        {
            var tH = document.createElement('input');
            tH.setAttribute('name', encodeURIComponent(k));
            tH.setAttribute('value', encodeURIComponent(data[k]));
            tF.appendChild(tH)
        };

        document.body.appendChild(tF);
        tF.submit()
    }


    function executeStatement()
    {
        var sel = window.editor.getSelection();
        var text = window.editor.getModel().getValueInRange(sel);
        var fullText = window.editor.getValue();
        
        var sql = text || fullText;
        // console.log("sql", sql);
        // alert("executing:\n" + sql);


        var data = {
            "sql": sql
        };

        postForm(data, "ifrmData");
        // console.log("sel", sel);
        // console.log("text", text);
        // console.log("full", fullText);
    }
    
    
    function fkey(e) {
        e = e || window.event;
        
        // use e.keyCode
        //if (e.keyCode == 116) // 116: F5
        if (e.keyCode == 117) // 117: F6
        {
            e.preventDefault() ? e.preventDefault(): e.returnValue=false;
            document.getElementById("btnExecute").click();
        }

        if (e.keyCode == 112) // 112: F1
        {
            e.preventDefault() ? e.preventDefault(): e.returnValue=false;
            e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
            alert("TODO: Open Help");
        }
        
        console.log(e.keyCode);
    }

    document.onkeydown = fkey;
    // document.onkeypress = fkey
    // document.onkeyup = fkey;
    
</script>


    <script type="text/javascript">

            function onDomReady()
            {
                console.log("dom ready");
            }
            if (document.addEventListener) document.addEventListener("DOMContentLoaded", onDomReady, false);
            else if (document.attachEvent) document.attachEvent("onreadystatechange", onDomReady);
            else window.onload = onDomReady;

            function onPageLoaded()
            {
                console.log("page loaded");
                executeStatement();
            }
            if (window.addEventListener) window.addEventListener("load", onPageLoaded, false);
            else if (window.attachEvent) window.attachEvent("onload", onPageLoaded);
            else window.onload = onPageLoaded;
    </script>

</body>
</html>
